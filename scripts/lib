# SPDX-License-Identifier: Apache-2.0
# (c) Copyright 2006 - 2022 Xilinx, Inc. All rights reserved.
export TE_LOG_LISTENER_LOG_LEVEL=WARN
SOCKAPI_TS_IF_ALIAS_DONE=false

get_random_vlan()
{
    echo $(((RANDOM % 4093) + 2))
}

#
# Use interface name aliases to avoid combining too long name.
# An interface name should not exceed 16 bytes length.
#
# Do not set aliases if SOCKAPI_TS_IF_ALIAS_DONE=true or bonding is used.
# Note, if $5=true is set changes will be applied ignoring
# SOCKAPI_TS_IF_ALIAS_DONE value.
#
use_interface_name_aliases()
{
    local var="$1"
    local base="$2"
    local alias="$3"
    local suffix="$4"
    local force=${5:-false}

    if test -n "$SOCKAPI_TS_BOND_NAME"  || \
       ($SOCKAPI_TS_IF_ALIAS_DONE && ! $force); then
        export $var="${base}.${suffix}"
        return
    fi

    export $var="${alias}.${suffix}"

    echo "Substitute base interface name $base -> $alias: ${!var}"
}

#
# Obtain the version of headers installed on agent from linux/version.h,
# and convert major and minor numbers of it to a single value, e.g.:
# 4.19.118 -> 419
# 4.9.210  -> 409
#
# @param $1 Host name
header2num()
{
    local host=$1

    # Obtain a decimal value from the string "#define LINUX_VERSION_CODE xxxxx"
    local ver=$(ssh $host cat /usr/include/linux/version.h | \
                grep LINUX_VERSION_CODE | \
                cut -d ' ' -f 3)

    local num1=$((ver >> 16))
    local num2=$((ver >> 8 & 0xFF))
    local header_num=$(($num1 * 100 + $num2))

    echo ${header_num}
}

#
# Export headers version
#
# @param $1 TA name (TE_IUT, TE_TST1, TE_TST2, TE_TST3)
#
export_headers_num()
{
    local host="${!1}"

    if test -n "$host" ; then
        export ${1}_HEADERS_NUM="$(header2num $host)"
    fi
}

#
# Export kernel version number (major version * 100 + minor version).
# Having version as a single number is convenient when there is a need
# to check whether kernel is modern enough to support some feature.
#
# @param $1   TA name (TE_IUT, TE_TST1, TE_TST2, TE_TST3)
#
export_kernel_version_num()
{
    local host="${!1}"

    if test -n "$host" ; then
        local ver=$(ssh $host uname -r | sed "s/\([0-9]\+[.][0-9]\+\)[.].*$/\1/")
        local ver_maj=${ver%%.*}
        local ver_min=${ver##*.}
        export ${1}_KERNEL_VERSION_NUM=$(($ver_maj * 100 + $ver_min))
    fi
}
